/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 solid.glb --t --include --transform --instance 
Files: solid.glb [13.01MB] > F:\DreiCoolStuff\react-drei\solid-transformed.glb [208.76KB] (98%)
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import type { JSX } from "react";

const materialScheme = {
  screen: {
    green: new THREE.MeshPhysicalMaterial({
      color: new THREE.Color("#99ff33"), // Toxic green
      metalness: 0.2, // Slight metallic edge
      roughness: 0.1, // Glossy surface
      reflectivity: 0.8, // Reflective
      clearcoat: 1, // Extra gloss on top
      clearcoatRoughness: 0.05, // Sharp clearcoat
      ior: 1.3, // Light bend
      transmission: 0, // Opaque (no glass effect)
      opacity: 1,
      emissiveIntensity: 0.3,
      emissive: new THREE.Color("#99ff33"),
      transparent: false,
    }),
  },
  metal: {
    aluminum: new THREE.MeshPhysicalMaterial({
      metalness: 1,
      roughness: 0.05,
      reflectivity: 0.8,
      clearcoat: 0.4,
      clearcoatRoughness: 0,
      color: new THREE.Color("#cccccc"), // light silver
    }),
  },
  glass: {
    green: new THREE.MeshPhysicalMaterial({
      color: "#aaff99",
      transmission: 1,
      roughness: 0.2,
      thickness: 0.4,
      ior: 1.5,
      reflectivity: 0.5,
      opacity: 1,
      transparent: true,
    }),
    blue: new THREE.MeshPhysicalMaterial({
      color: "#050A30",
      transmission: 0.9,
      roughness: 0.02,
      thickness: 0.4,
      ior: 1.5,
      reflectivity: 0.5,
      opacity: 1,
      transparent: true,
    }),
    white: new THREE.MeshPhysicalMaterial({
      color: "#FFFFFF",
      transmission: 0.95,
      roughness: 0.1,
      thickness: 0.4,
      ior: 1.5,
      reflectivity: 0.7,
      opacity: 1,
      transparent: true,
    }),
  },
};

type GLTFResult = GLTF & {
  nodes: {
    laptop_body_2: THREE.Mesh;
    rectangle_1: THREE.Mesh;
    laptop_bottom: THREE.Mesh;
    laptop_base: THREE.Mesh;
    laptop_body: THREE.Mesh;
    floor: THREE.Mesh;
    stair_1: THREE.Mesh;
    stair_2: THREE.Mesh;
    stair_3: THREE.Mesh;
    half_circle: THREE.Mesh;
    half_tube: THREE.Mesh;
    cube_1: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    ["Aluminum_-_Satin_casing.jpg"]: THREE.MeshStandardMaterial;
    ["Aluminum_-_Satin"]: THREE.MeshStandardMaterial;
    ["Steel_-_Satin"]: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
  };
};

export function Solid(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/solid.glb") as unknown as GLTFResult;
  console.log(materials);
  return (
    <group {...props} dispose={null} position={[0, -0.5, 0]}>
      <mesh
        receiveShadow
        geometry={nodes.laptop_body_2.geometry}
        material={materials.PaletteMaterial001}
        position={[0, 0.077, -0.369]}
      />
      <mesh
        receiveShadow
        geometry={nodes.rectangle_1.geometry}
        material={materialScheme.glass.blue}
        position={[-0.919, 0.189, -0.759]}
        rotation={[0, -0.272, 0]}
      />
      <mesh
        receiveShadow
        geometry={nodes.laptop_bottom.geometry}
        material={undefined}
        // material={materials["Aluminum_-_Satin_casing.jpg"]}
        position={[0, 0.077, -0.369]}
      >
        <primitive object={materialScheme.metal.aluminum} attach="material" />
      </mesh>
      <mesh
        receiveShadow
        geometry={nodes.laptop_base.geometry}
        // material={materials["Aluminum_-_Satin"]}
        material={undefined}
        position={[0, 0.077, -0.369]}
      >
        <primitive object={materialScheme.metal.aluminum} attach="material" />
      </mesh>
      <mesh
        receiveShadow
        geometry={nodes.laptop_body.geometry}
        material={undefined}
        position={[0, 0.077, -0.369]}
      >
        <primitive object={materialScheme.screen.green} attach="material" />
      </mesh>

      {/* <mesh
        receiveShadow
        geometry={nodes.floor.geometry}
        material={undefined}
        position={[0, 0, -0.472]}
      >
        <MeshReflectorMaterial
          blur={[300, 30]}
          resolution={2048}
          mixBlur={1}
          mixStrength={180}
          roughness={1}
          depthScale={1.2}
          minDepthThreshold={0.4}
          maxDepthThreshold={1.4}
          color="#202020"
          metalness={0.8}
        />
      </mesh> */}
      <mesh
        receiveShadow
        geometry={nodes.stair_1.geometry}
        material={materialScheme.glass.green}
        rotation={[0.1, -2, 1.6]}
        position={[1, 0.45, -1]}
      />
      <mesh
        receiveShadow
        geometry={nodes.stair_2.geometry}
        material={materialScheme.glass.green}
        rotation={[0, 2, 1.7]}
        position={[-0.95, 0.73, -0.85]}
      />
      <mesh
        receiveShadow
        geometry={nodes.stair_3.geometry}
        material={materialScheme.glass.green}
        rotation={[0.01, 3.4, 3.15]}
        position={[-0.7, 0.12, 0.2]}
      />
      <mesh
        receiveShadow
        geometry={nodes.half_circle.geometry}
        material={materialScheme.glass.white}
        rotation={[Math.PI / 2, 0, 0]}
        position={[-1.03, 0.05, -0.5]}
      />
      <mesh
        receiveShadow
        geometry={nodes.half_tube.geometry}
        material={materialScheme.glass.blue}
        rotation={[Math.PI / 2, 0, 0]}
        position={[1, 0.01, -0.4]}
      />
      <mesh
        receiveShadow
        geometry={nodes.cube_1.geometry}
        material={materialScheme.glass.white}
        position={[0.92, 0.18, -0.85]}
      />
    </group>
  );
}

useGLTF.preload("/solid.glb");
